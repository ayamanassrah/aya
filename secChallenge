void main() {
String expression1 = "(a + b) * (c - d)";
String expression2 = "((a + b) * (c - d)";

print('Expression 1 is balanced: ${isBalanced(expression1)}');
print('Expression 2 is balanced: ${isBalanced(expression2)}');
}

bool isBalanced(String expression) {
Stack<String> stack = Stack();

for (int i = 0; i < expression.length; i++) {
String char = expression[i];

if (char == '(') {
stack.push(char);
} else if (char == ')') {
if (stack.isEmpty()) {
return false; // Unmatched closing parenthesis
}
stack.pop();
}
}

return stack.isEmpty; // Stack should be empty if parentheses are balanced
}

class Stack<T> {
List<T> _items = [];

void push(T item) {
_items.add(item);
}

T pop() {
if (isEmpty()) {
throw StateError('Cannot pop from an empty stack');
}
return _items.removeLast();
}

bool isEmpty() {
return _items.isEmpty;
}
}
